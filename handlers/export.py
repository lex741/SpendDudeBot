import re
import datetime
from zoneinfo import ZoneInfo
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
    ReplyKeyboardRemove,
)
from bot_config import dp, bot
from services.expenses import get_expenses_filtered
from services.categories import get_category_by_id
from utils.buttons import main_kb
import csv
import os

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è custom –¥–∏–∞–ø–∞–∑–æ–Ω–∞
export_state: dict[int, bool] = {}

@dp.message(lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
async def export_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="export_month"),
        InlineKeyboardButton(text="–ó–∞ –≥–æ–¥",    callback_data="export_year"),
        InlineKeyboardButton(text="–°–≤–æ–∏ –¥–∞—Ç—ã", callback_data="export_custom"),
    ]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV:", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ("export_month", "export_year"))
async def export_standard_period(query: CallbackQuery):
    user_id = query.from_user.id
    now = datetime.datetime.now(tz=ZoneInfo("Europe/Kyiv"))
    tag = query.data.split("_")[1]
    if tag == "month":
        start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        start = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
    end = now
    await generate_and_send_csv(user_id, start, end, query.message)
    await query.answer()

@dp.callback_query(lambda c: c.data == "export_custom")
async def export_custom(query: CallbackQuery):
    export_state[query.from_user.id] = True
    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω YYYY-MM-DD‚ÄìYYYY-MM-DD –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    await query.answer()

@dp.message(lambda m: export_state.get(m.from_user.id))
async def export_custom_input(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    m = re.fullmatch(r"(\d{4}-\d{2}-\d{2})[‚Äì-](\d{4}-\d{2}-\d{2})", text)
    if not m:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-06-01‚Äì2025-06-30", reply_markup=main_kb)
    start = datetime.datetime.fromisoformat(m.group(1)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    end   = datetime.datetime.fromisoformat(m.group(2)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    await generate_and_send_csv(user_id, start, end, message)
    export_state.pop(user_id, None)

async def generate_and_send_csv(user_id: int, start: datetime.datetime, end: datetime.datetime, target):
    # –ø–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—ã
    exps = get_expenses_filtered(user_id, start=start, end=end)
    if not exps:
        return await target.answer("–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=main_kb)
    # –≥–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª
    filename = f"export_{user_id}.csv"
    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    from itertools import groupby
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    exps_sorted = sorted(exps, key=lambda e: get_category_by_id(e.category_id).name)
    with open(filename, mode='w', encoding='utf-8-sig', newline='') as f:
        writer = csv.writer(f, delimiter=';')
        # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥ –Ω–∏–º —Å—Ç—Ä–æ–∫–∏
        for cat_name, items in groupby(exps_sorted, key=lambda e: get_category_by_id(e.category_id).name):
            writer.writerow([f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}"])
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: –¥–∞—Ç–∞, —Å—É–º–º–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            writer.writerow(["–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
            for e in items:
                date_str = e.date.astimezone(ZoneInfo("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M")
                writer.writerow([date_str, f"{e.amount:.2f}", e.comment or ""])
            # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            writer.writerow([])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = FSInputFile(filename)
    await bot.send_document(chat_id=user_id, document=file, reply_markup=main_kb)
    # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)
