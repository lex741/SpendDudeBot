import datetime
from zoneinfo import ZoneInfo
import re
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    ReplyKeyboardRemove,
)
from bot_config import dp, bot
from services.reports import get_sum_by_category, get_weekly_expenses
from utils.charts import plot_pie, plot_bar
from utils.buttons import main_kb

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è custom —Å—É–º–º
user_sum_state: dict[int, bool] = {}

@dp.message(lambda m: m.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics_menu(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üìà Pie",    callback_data="chart_pie"),
        InlineKeyboardButton(text="üìä Bar",    callback_data="chart_bar"),
        InlineKeyboardButton(text="üí≤ –°—É–º–º–∞", callback_data="sum_menu"),
    ]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=kb)

# Pie
@dp.callback_query(lambda c: c.data == "chart_pie")
async def pie_month(query: CallbackQuery):
    user_id = query.from_user.id
    now = datetime.datetime.now(tz=ZoneInfo("Europe/Kyiv"))
    start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    data = get_sum_by_category(user_id, start, now)
    if not data:
        return await query.answer("–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", show_alert=True)
    # —Ç–æ–ø-5 + –ø—Ä–æ—á–∏–µ
    items = sorted(data.items(), key=lambda x: x[1], reverse=True)
    top5 = items[:5]
    others = sum(v for _, v in items[5:])
    if others:
        top5.append(("–ü—Ä–æ—á–∏–µ", others))
    labels, sizes = zip(*top5)
    filename = f"pie_{user_id}.png"
    plot_pie(dict(zip(labels, sizes)), "Pie-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", filename)
    photo = FSInputFile(path=filename)
    await bot.send_photo(chat_id=user_id, photo=photo)
    await bot.send_message(chat_id=user_id, text="–ì–æ—Ç–æ–≤–æ ü•ß", reply_markup=main_kb)
    await query.answer()

# Bar
@dp.callback_query(lambda c: c.data == "chart_bar")
async def bar_month(query: CallbackQuery):
    user_id = query.from_user.id
    now = datetime.datetime.now(tz=ZoneInfo("Europe/Kyiv"))
    start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    data = get_weekly_expenses(user_id, start, now)
    if not data:
        return await query.answer("–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", show_alert=True)
    filename = f"bar_{user_id}.png"
    plot_bar(data, "Bar-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü", filename)
    photo = FSInputFile(path=filename)
    await bot.send_photo(chat_id=user_id, photo=photo)
    await bot.send_message(chat_id=user_id, text="–ì–æ—Ç–æ–≤–æ üìä", reply_markup=main_kb)
    await query.answer()

# Sum menu
@dp.callback_query(lambda c: c.data == "sum_menu")
async def sum_menu(query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="sum_month"),
        InlineKeyboardButton(text="–ó–∞ –≥–æ–¥",    callback_data="sum_year"),
        InlineKeyboardButton(text="–°–≤–æ–∏ –¥–∞—Ç—ã", callback_data="sum_custom"),
    ]])
    await query.message.edit_text("–°—É–º–º–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await query.answer()

@dp.callback_query(lambda c: c.data in ("sum_month", "sum_year"))
async def sum_period(query: CallbackQuery):
    tag = query.data.split("_")[1]
    now = datetime.datetime.now(tz=ZoneInfo("Europe/Kyiv"))
    if tag == "month":
        start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        period_name = "–º–µ—Å—è—Ü"
    else:
        start = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        period_name = "–≥–æ–¥"

    data = get_sum_by_category(query.from_user.id, start, now)
    if not data:
        await query.answer(f"–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π {period_name}.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    lines = [f"{cat}: {total:.2f} ‚Ç¥" for cat, total in data.items()]
    total_sum = sum(data.values())
    lines.append(f"–í—Å–µ–≥–æ: {total_sum:.2f} ‚Ç¥")

    text = f"–°—É–º–º–∞ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {period_name}:\n" + "\n".join(lines)
    # —É–¥–∞–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é
    await query.message.edit_reply_markup(reply_markup=None)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å main_kb
    await query.message.answer(text, reply_markup=main_kb)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–°–≤–æ–∏ –¥–∞—Ç—ã¬ª
@dp.callback_query(lambda c: c.data == "sum_custom")
async def sum_custom(query: CallbackQuery):
    user_sum_state[query.from_user.id] = True
    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω YYYY-MM-DD‚ÄìYYYY-MM-DD:",
        reply_markup=ReplyKeyboardRemove()
    )
    await query.answer()

@dp.message(lambda m: user_sum_state.get(m.from_user.id))
async def sum_custom_input(message: Message):
    text = message.text.strip()
    m = re.fullmatch(r"(\d{4}-\d{2}-\d{2})[‚Äì-](\d{4}-\d{2}-\d{2})", text)
    if not m:
        return await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-06-01‚Äì2025-06-30",
            reply_markup=main_kb
        )

    start = datetime.datetime.fromisoformat(m.group(1)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    end   = datetime.datetime.fromisoformat(m.group(2)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    data = get_sum_by_category(message.from_user.id, start, end)

    if not data:
        await message.answer("–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=main_kb)
    else:
        lines = [f"{cat}: {total:.2f} ‚Ç¥" for cat, total in data.items()]
        total_sum = sum(data.values())
        lines.append(f"–í—Å–µ–≥–æ: {total_sum:.2f} ‚Ç¥")
        text_resp = f"–°—É–º–º–∞ —Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {start.date()}‚Äì{end.date()}:\n" + "\n".join(lines)
        await message.answer(text_resp, reply_markup=main_kb)

    user_sum_state.pop(message.from_user.id, None)