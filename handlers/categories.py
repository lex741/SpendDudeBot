import re
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from bot_config import dp
from services.categories import (
    get_categories,
    add_category,
    delete_category,
    has_expenses,
    delete_category_and_expenses,
)
from utils.buttons import main_kb

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
user_states: dict[int, str] = {}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def send_categories(chat_target):
    cats = get_categories(chat_target.from_user.id)
    if cats:
        lines = [f"{i}. {cat.name}" for i, cat in enumerate(cats, start=1)]
        text = "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(lines)
    else:
        text = "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="cat_add"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data="cat_delete"),
        ]]
    )
    # chat_target –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery.message
    await chat_target.answer(text, reply_markup=kb)

@dp.message(lambda m: m.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message):
    await send_categories(message)

@dp.callback_query(lambda c: c.data == "cat_add")
async def on_add_button(query: CallbackQuery):
    user_states[query.from_user.id] = "adding"
    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await query.answer()

@dp.callback_query(lambda c: c.data == "cat_delete")
async def on_delete_button(query: CallbackQuery):
    cats = get_categories(query.from_user.id)
    if not cats:
        await query.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{i}. {cat.name}", callback_data=f"del_{i}")]
            for i, cat in enumerate(cats, start=1)
        ]
    )
    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ "del_<–Ω–æ–º–µ—Ä>"
@dp.callback_query(lambda c: c.data and re.fullmatch(r"del_\d+", c.data))
async def on_delete_choice(query: CallbackQuery):
    pos = int(query.data.split("_", 1)[1])
    cats = get_categories(query.from_user.id)
    if pos < 1 or pos > len(cats):
        return await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)

    cat = cats[pos - 1]
    if has_expenses(query.from_user.id, cat.id):
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"del_confirm_{pos}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",    callback_data="cat_delete_cancel"),
            ]]
        )
        await query.message.edit_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat.name}¬ª –µ—Å—Ç—å —Ç—Ä–∞—Ç—ã.\n–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë —Ç—Ä–∞—Ç—ã?", reply_markup=kb
        )
        await query.answer()
    else:
        delete_category(query.from_user.id, cat.id)
        await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await send_categories(query.message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query(lambda c: c.data and re.fullmatch(r"del_confirm_\d+", c.data))
async def on_delete_confirm(query: CallbackQuery):
    pos = int(query.data.rsplit("_", 1)[1])
    cats = get_categories(query.from_user.id)
    if pos < 1 or pos > len(cats):
        return await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)

    real_cat_id = cats[pos - 1].id
    delete_category_and_expenses(query.from_user.id, real_cat_id)
    await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë —Ç—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
    await send_categories(query.message)

@dp.callback_query(lambda c: c.data == "cat_delete_cancel")
async def on_delete_cancel(query: CallbackQuery):
    await query.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)
    await send_categories(query.message)

@dp.message(lambda m: user_states.get(m.from_user.id) == "adding")
async def on_new_category(message: Message):
    name = message.text.strip()
    existing = [c.name for c in get_categories(message.from_user.id)]
    if name in existing:
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=main_kb)
    else:
        add_category(message.from_user.id, name)
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_kb)
    user_states.pop(message.from_user.id, None)