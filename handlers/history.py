import re
import datetime
from zoneinfo import ZoneInfo
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from bot_config import dp
from services.expenses import (
    get_recent_expenses,
    get_expenses_filtered,
    delete_expense,
)
from services.categories import get_categories, get_category_by_id
from utils.buttons import main_kb

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏
history_state: dict[int, dict] = {}

@dp.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history_menu(message: Message):
    user_id = message.from_user.id
    history_state[user_id] = {}
    await send_history_list(user_id, message)

async def send_history_list(user_id: int, target):
    state = history_state.get(user_id, {})
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º set —Ä–∞—Å—Ö–æ–¥–æ–≤
    if state.get("mode") == "category":
        cat_id = state["category_id"]
        expenses = get_expenses_filtered(user_id, category_id=cat_id)
        header = f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{get_category_by_id(cat_id).name}¬ª:\n"
    elif state.get("mode") in ("period_month", "period_year"):
        start, end = state["start"], state["end"]
        expenses = get_expenses_filtered(user_id, start=start, end=end)
        header = f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ {start.date()}‚Äì{end.date()}:\n"
    elif state.get("mode") == "period_custom":
        start, end = state["start"], state["end"]
        expenses = get_expenses_filtered(user_id, start=start, end=end)
        header = f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞ {start.date()}‚Äì{end.date()}:\n"
    elif state.get("mode") == "cat_period":
        cat_id = state["category_id"]
        start, end = state["start"], state["end"]
        expenses = get_expenses_filtered(user_id, category_id=cat_id, start=start, end=end)
        header = f"–ò—Å—Ç–æ—Ä–∏—è ¬´{get_category_by_id(cat_id).name}¬ª –∑–∞ {start.date()}‚Äì{end.date()}:\n"
    else:
        expenses = get_recent_expenses(user_id, limit=10)
        header = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ç—Ä–∞—Ç:\n"

    if not expenses:
        return await target.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_kb)

    lines = []
    for idx, e in enumerate(expenses, start=1):
        ts = e.date.astimezone(ZoneInfo("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M")
        cat = get_category_by_id(e.category_id)
        cat_name = cat.name if cat else '-'
        lines.append(f"{idx}. {ts} ‚Äî {e.amount:.2f} ‚Ç¥ ‚Äî {cat_name} ‚Äî {e.comment or '-'}")

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: —Ñ–∏–ª—å—Ç—Ä—ã –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    rows = [[
        InlineKeyboardButton(text="–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="hist_filter_cat"),
        InlineKeyboardButton(text="–ü–æ –ø–µ—Ä–∏–æ–¥—É", callback_data="hist_filter_period_menu"),
        InlineKeyboardButton(text="–ö–∞—Ç+–ü–µ—Ä–∏–æ–¥", callback_data="hist_filter_cat_period"),
    ], [
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data="hist_start_delete")
    ]]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await target.answer(header + "\n".join(lines), reply_markup=kb)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –¥–≤–∞ —à–∞–≥–∞
@dp.callback_query(lambda c: c.data == "hist_start_delete")
async def start_delete_flow(query: CallbackQuery):
    user_id = query.from_user.id
    state = history_state.get(user_id, {})
    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    if state.get("mode") == "category":
        exps = get_expenses_filtered(user_id, category_id=state["category_id"])
    elif state.get("mode") in ("period_month","period_year","period_custom"):
        exps = get_expenses_filtered(user_id, start=state.get("start"), end=state.get("end"))
    elif state.get("mode") == "cat_period":
        exps = get_expenses_filtered(user_id, category_id=state["category_id"], start=state.get("start"), end=state.get("end"))
    else:
        exps = get_recent_expenses(user_id, limit=10)

    if not exps:
        return await query.answer("–ù–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
    await query.message.edit_reply_markup(reply_markup=None)
    # –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞
    rows = [[InlineKeyboardButton(text=str(idx), callback_data=f"hist_delete_{idx}")]
            for idx, _ in enumerate(exps, start=1)]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", reply_markup=kb)
    await query.answer()

@dp.callback_query(lambda c: c.data.startswith("hist_delete_"))
async def delete_by_position(query: CallbackQuery):
    user_id = query.from_user.id
    pos = int(query.data.split("_", 2)[2])
    state = history_state.get(user_id, {})
    if state.get("mode") == "category":
        exps = get_expenses_filtered(user_id, category_id=state["category_id"])
    elif state.get("mode") in ("period_month","period_year","period_custom"):
        exps = get_expenses_filtered(user_id, start=state.get("start"), end=state.get("end"))
    elif state.get("mode") == "cat_period":
        exps = get_expenses_filtered(user_id, category_id=state["category_id"], start=state.get("start"), end=state.get("end"))
    else:
        exps = get_recent_expenses(user_id, limit=10)

    if pos < 1 or pos > len(exps):
        return await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", show_alert=True)
    exp = exps[pos-1]
    ok = delete_expense(user_id, exp.id)
    await query.answer("–¢—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ" if ok else "–û—à–∏–±–∫–∞ ‚ùå")
    await send_history_list(user_id, query.message)

# –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data == "hist_filter_cat")
async def filter_by_category(query: CallbackQuery):
    user_id = query.from_user.id
    cats = get_categories(user_id)
    if not cats:
        return await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
    rows = [[InlineKeyboardButton(text=c.name, callback_data=f"hist_cat_{c.id}")] for c in cats]
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    history_state[user_id] = {"mode": "category"}
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await query.answer()

@dp.callback_query(lambda c: c.data.startswith("hist_cat_"))
async def handle_category_choice(query: CallbackQuery):
    user_id = query.from_user.id
    cat_id = int(query.data.split("_", 2)[2])
    history_state[user_id]["category_id"] = cat_id
    await query.answer()
    await send_history_list(user_id, query.message)

# –ù–æ–≤–æ–µ –º–µ–Ω—é –ø–æ –ø–µ—Ä–∏–æ–¥—É: –º–µ—Å—è—Ü, –≥–æ–¥, —Å–≤–æ–∏ –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data == "hist_filter_period_menu")
async def filter_period_menu(query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü", callback_data="hist_period_month"),
        InlineKeyboardButton(text="–ó–∞ –≥–æ–¥",    callback_data="hist_period_year"),
        InlineKeyboardButton(text="–°–≤–æ–∏ –¥–∞—Ç—ã", callback_data="hist_period_custom"),
    ]])
    history_state[query.from_user.id] = {}
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb)
    await query.answer()

@dp.callback_query(lambda c: c.data in ("hist_period_month","hist_period_year"))
async def handle_period_choice(query: CallbackQuery):
    tag = query.data.split("_")[2]
    now = datetime.datetime.now(tz=ZoneInfo("Europe/Kyiv"))
    if tag == "month":
        start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        state_mode = "period_month"
    else:
        start = now.replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
        state_mode = "period_year"
    history_state[query.from_user.id] = {"mode": state_mode, "start": start, "end": now}
    await query.answer()
    await send_history_list(query.from_user.id, query.message)

@dp.callback_query(lambda c: c.data == "hist_period_custom")
async def handle_period_custom(query: CallbackQuery):
    user_id = query.from_user.id
    history_state[user_id] = {"mode": "period_custom"}
    await query.message.edit_reply_markup(reply_markup=None)
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω YYYY-MM-DD‚ÄìYYYY-MM-DD:",
        reply_markup=ReplyKeyboardRemove()
    )
    await query.answer()

@dp.message(lambda m: history_state.get(m.from_user.id, {}).get("mode") == "period_custom")
async def handle_custom_period_input(message: Message):
    user_id = message.from_user.id
    text_input = message.text.strip()
    match = re.fullmatch(r"(\d{4}-\d{2}-\d{2})[‚Äì-](\d{4}-\d{2}-\d{2})", text_input)
    if not match:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-06-01‚Äì2025-06-30")
    start = datetime.datetime.fromisoformat(match.group(1)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    end   = datetime.datetime.fromisoformat(match.group(2)).replace(tzinfo=ZoneInfo("Europe/Kyiv"))
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    expenses = get_expenses_filtered(user_id, start=start, end=end)
    if not expenses:
        await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_kb)
    else:
        header = f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞ {start.date()}‚Äì{end.date()}:\n"
        lines = []
        for idx, e in enumerate(expenses, start=1):
            ts = e.date.astimezone(ZoneInfo("Europe/Kyiv")).strftime("%Y-%m-%d %H:%M")
            cat = get_category_by_id(e.category_id)
            cat_name = cat.name if cat else '-'
            lines.append(f"{idx}. {ts} ‚Äî {e.amount:.2f} ‚Ç¥ ‚Äî {cat_name} ‚Äî {e.comment or '-'}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(header + "\n".join(lines), reply_markup=main_kb)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    history_state.pop(user_id, None)