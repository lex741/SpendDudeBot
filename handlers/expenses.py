# handlers/expenses.py

import datetime
from zoneinfo import ZoneInfo

from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove, CallbackQuery
)
from bot_config import dp
from services.expenses import (
    add_expense, get_recent_expenses, get_user_balance
)
from services.categories import get_categories, get_category_by_id, has_expenses, delete_category_and_expenses
from utils.buttons import main_kb

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ç—ã
user_tx: dict[int, dict] = {}

# --- 1) –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
async def start_add(message: Message):
    user_tx[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã (—á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())

# --- 2) –°—É–º–º–∞ ---
@dp.message(lambda m: m.from_user.id in user_tx and 'amount' not in user_tx[m.from_user.id])
async def enter_amount(message: Message):
    try:
        amt = float(message.text.replace(',', '.'))
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´250.50¬ª:")
    user_tx[message.from_user.id]['amount'] = amt
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")

# --- 3) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ---
@dp.message(lambda m: m.from_user.id in user_tx
                         and 'amount' in user_tx[m.from_user.id]
                         and 'comment' not in user_tx[m.from_user.id])
async def enter_comment(message: Message):
    comment = "" if message.text == '-' else message.text.strip()
    tx = user_tx[message.from_user.id]
    tx['comment'] = comment

    cats = get_categories(message.from_user.id)
    if not cats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=main_kb)
        user_tx.pop(message.from_user.id, None)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=c.name, callback_data=f"tx_cat_{c.id}")]
            for c in cats
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

# --- 4) –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã ---
@dp.callback_query(lambda c: c.data and c.data.startswith("tx_cat_"))
async def choose_category(query: CallbackQuery):
    user_id = query.from_user.id
    cat_id = int(query.data.split("_", 2)[2])
    data = user_tx.get(user_id)
    if not data:
        return await query.answer("–°–µ—Å—Å–∏—è –ø—Ä–æ—Ç—É—Ö–ª–∞ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è UTC ‚Üí Europe/Kyiv
    utc_dt = query.message.date.replace(tzinfo=datetime.timezone.utc)
    local_dt = utc_dt.astimezone(ZoneInfo("Europe/Kyiv"))

    exp = add_expense(
        user_id=user_id,
        amount=data['amount'],
        comment=data['comment'],
        category_id=cat_id,
        date=local_dt  # —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    )
    balance = get_user_balance(user_id)
    category = get_category_by_id(cat_id)
    cat_name = category.name if category else "‚Äî"

    await query.answer("–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await query.message.answer(
        f"‚úÖ –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {exp.amount:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat_name}¬ª\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {exp.comment or '‚Äî'}\n"
        f"–í—Ä–µ–º—è: {exp.date.strftime('%Y-%m-%d %H:%M')}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫: {balance:.2f}",
        reply_markup=main_kb
    )
    user_tx.pop(user_id, None)

# --- 5) –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ç—Ä–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message):
    lst = get_recent_expenses(message.from_user.id, limit=5)
    if not lst:
        return await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ç—Ä–∞—Ç.", reply_markup=main_kb)

    lines = []
    for e in lst:
        cat = get_category_by_id(e.category_id)
        cat_name = cat.name if cat else "‚Äî"
        ts = e.date.strftime("%Y-%m-%d %H:%M")
        lines.append(f"{ts} ‚Äî {e.amount:.2f}  [{cat_name}]  ¬´{e.comment or '-'}¬ª")

    await message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã:\n" + "\n".join(lines), reply_markup=main_kb)
